<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>ls-lrt.com - Linux</title>
    <subtitle>Blog Site of Samir Parhi</subtitle>
    <link rel="self" type="application/atom+xml" href="https://ls-lrt.com/tags/linux/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://ls-lrt.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-04-30T00:00:00+00:00</updated>
    <id>https://ls-lrt.com/tags/linux/atom.xml</id>
    <entry xml:lang="en">
        <title>Securing Meshery Installation: The best practices</title>
        <published>2024-04-30T00:00:00+00:00</published>
        <updated>2024-04-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/securing-meshery-installation/"/>
        <id>https://ls-lrt.com/securing-meshery-installation/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/securing-meshery-installation/">&lt;p&gt;We are delighted that you are loving Meshery, so it is our sole responsibility to make sure that you are in safe hands. The below few lines will describe how can you harden your security for accessing meshery so that you make eventually keep all your infrastructure sharing the same network are safe.&lt;&#x2F;p&gt;
&lt;p&gt;There are 2 scenario that people use meshery :&lt;&#x2F;p&gt;
&lt;p&gt;A standalone installation (May be in a VM)&lt;&#x2F;p&gt;
&lt;p&gt;A deployment in a Kubernetes cluster.&lt;&#x2F;p&gt;
&lt;p&gt;In general, each of the above installation method would need an IP (public&#x2F;private IP) for you to access the meshery UI.&lt;&#x2F;p&gt;
&lt;p&gt;To Ensure you are securely accessing meshery below are the few point you should keep in mind.&lt;&#x2F;p&gt;
&lt;p&gt;Best Practices:&lt;&#x2F;p&gt;
&lt;p&gt;It is perfectly fine to expose public endpoint &#x2F; ip to evaluate Meshey provided the meshery is installed in a isolated environment (do not connect to any of the infra object in your landscape)&lt;&#x2F;p&gt;
&lt;p&gt;If you are installing Meshery in a standalone VM which share the same network of your other infrastructure object, we recommend not to Expose public IP. Instead use the VPN solution with a private endpoint to your meshery installation (the virtual machine). It is very easy to use the VPN solution if you are hosting it in any of the cloud platform&lt;&#x2F;p&gt;
&lt;p&gt;Incase you are installing meshery in side a Kubernetes cluster (which is very common), By default Meshery uses the service type as loadBalancer which creates a public ip and exposes the Meshry service to outside cluster.&lt;&#x2F;p&gt;
&lt;p&gt;This default behaviour keeps in mind that you are evaluating Meshery at the moment . Also you acknowledge, you are well aware about the behaviour of kubernetes loadbalancer and its limitations.&lt;&#x2F;p&gt;
&lt;p&gt;But we recommend that you should always use the kubernetes service type clusterIp while installing meshery in a production grade infrastructure. It is doable by overriding values.yml if you are using helm installation method to install Meshery. It can also be done by the command line installation tool.&lt;&#x2F;p&gt;
&lt;p&gt;Now you can make use of portforward or ingress component to expose and access the meshery services. However portforward can be used for meshery evaluation and for short term usage and ingress can be used to expose meshery from a prod&#x2F;test&#x2F;dev environment where you have ingress installed.&lt;&#x2F;p&gt;
&lt;p&gt;The above points are considered to be the more safe-way to use meshery in your infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;You can find the topic how to configure Meshery behind the ingress in this link: https:&#x2F;&#x2F;ls-lrt.com&#x2F;configuring-meshery-behind-istio-ingress-gateway&lt;&#x2F;p&gt;
&lt;p&gt;you can find this blog here too : https:&#x2F;&#x2F;discuss.layer5.io&#x2F;t&#x2F;securing-meshery-installation-the-best-practices&#x2F;679&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Shell script to Migrate Azure Container Registry</title>
        <published>2024-04-30T00:00:00+00:00</published>
        <updated>2024-04-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/shell-script-for-migrating-azure-container-registry/"/>
        <id>https://ls-lrt.com/shell-script-for-migrating-azure-container-registry/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/shell-script-for-migrating-azure-container-registry/">&lt;p&gt;When someone asks to migrate an ACR from one Azure subscription to another azure subscription, it feels like a tedious task. Because you must migrate Image repositories and all the image tags that are in those repositories.
Traditionally, you can use az acr import command to achieve this. But when the number of repositories increases, it takes an exponentially high unproductive time.&lt;&#x2F;p&gt;
&lt;p&gt;I have recently gone through this situation and thought to automate this process. Below z shell script, I have come up, which may help you in those scenarios.&lt;&#x2F;p&gt;
&lt;p&gt;**Prerequisites to use this command: **&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;1. Docker Desktop&#x2F; Docker binary is installed
&lt;&#x2F;span&gt;&lt;span&gt;2. AZ CLI is installed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;**Steps: **&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;1. first create a new Azure Container Registry
&lt;&#x2F;span&gt;&lt;span&gt;2. login to the new repository using AZ CLI (az acr login command)
&lt;&#x2F;span&gt;&lt;span&gt;3. Keep the below information ready
&lt;&#x2F;span&gt;&lt;span&gt;    1. Name of your old repository
&lt;&#x2F;span&gt;&lt;span&gt;    2. Username of the old repository
&lt;&#x2F;span&gt;&lt;span&gt;    3. Password of the old repository
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;4. Now Run the below shell script
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ```   
&lt;&#x2F;span&gt;&lt;span&gt;    #!&#x2F;bin&#x2F;zsh
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Enter the Source ACR Name: &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    read SourceAcrName
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Enter the Source ACR User Name: &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    read SourceAcrUsrName
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Enter the Source ACR Password: &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    read -s SourceAcrpasswd
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Enter the Destination ACR Name: &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    read DestinationAcrName
&lt;&#x2F;span&gt;&lt;span&gt;    Repos=$(az acr repository list --name $SourceAcrName --username=$SourceAcrUsrName --password=$SourceAcrpasswd | tr -d &amp;#39;[] &amp;quot;&amp;quot; ,&amp;#39;| grep &amp;quot;\S&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    echo $Repos | while read RepoName
&lt;&#x2F;span&gt;&lt;span&gt;    do
&lt;&#x2F;span&gt;&lt;span&gt;    Tags=$(az acr repository show-tags -n $SourceAcrName --repository $line --username=$SourceAcrUsrName --password=$SourceAcrpasswd | tr -d &amp;#39;[] &amp;quot;&amp;quot; ,&amp;#39;| grep &amp;quot;\S&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    echo $Tags | while read TagName
&lt;&#x2F;span&gt;&lt;span&gt;    do
&lt;&#x2F;span&gt;&lt;span&gt;    az acr import \
&lt;&#x2F;span&gt;&lt;span&gt;    --name $DestinationAcrName \
&lt;&#x2F;span&gt;&lt;span&gt;    --source $SourceAcrName.azurecr.io&#x2F;$RepoName:$TagName \
&lt;&#x2F;span&gt;&lt;span&gt;    --image $RepoName:$TagName \
&lt;&#x2F;span&gt;&lt;span&gt;    --username=$SourceAcrName \
&lt;&#x2F;span&gt;&lt;span&gt;    --password=$SourceAcrpasswd \
&lt;&#x2F;span&gt;&lt;span&gt;    --no-wait
&lt;&#x2F;span&gt;&lt;span&gt;    done
&lt;&#x2F;span&gt;&lt;span&gt;    Done
&lt;&#x2F;span&gt;&lt;span&gt;    ```
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: in this Shell Script Source ACR Name is old repository name. Source ACR Username is Username of the old repository. Source ACR Password is Password of the old repository. This is written for zsh shell, if you would like to use it for bash shell please change #!&#x2F;bin&#x2F;zsh to #!&#x2F;bin&#x2F;bash.&lt;&#x2F;p&gt;
&lt;p&gt;Hope this helps.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Shell script to Remove history from a git Branch</title>
        <published>2024-04-30T00:00:00+00:00</published>
        <updated>2024-04-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/shell-script-to-remove-history-from-a-git-branch/"/>
        <id>https://ls-lrt.com/shell-script-to-remove-history-from-a-git-branch/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/shell-script-to-remove-history-from-a-git-branch/">&lt;p&gt;There are various instances where we decide to remove the history from a git repository.&lt;&#x2F;p&gt;
&lt;p&gt;The most common use case :&lt;&#x2F;p&gt;
&lt;p&gt;You find out there are some secret information like credential or the database string that is been exposed to git hub and also it is recorded in the history. at this moment you may searching to delete the history.&lt;&#x2F;p&gt;
&lt;p&gt;This shell script allows you to remove all the history of a given branch (please remember this shell script remove all the history of the branch), you can make use of this script which is combination of few git commands and has been clubbed to make this task easier for you.&lt;&#x2F;p&gt;
&lt;p&gt;Shell script :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;    ```
&lt;&#x2F;span&gt;&lt;span&gt;    #!&#x2F;bin&#x2F;zsh
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Important !!! Make sure you are Checked out to the Branch in which you want to remove the history&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;your Repository URL: (usually looks like https:&#x2F;&#x2F;github.com&#x2F;example.git) &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    read gitURL
&lt;&#x2F;span&gt;&lt;span&gt;    git clone $gitURL
&lt;&#x2F;span&gt;&lt;span&gt;    if [ $? -eq 0 ]
&lt;&#x2F;span&gt;&lt;span&gt;    then
&lt;&#x2F;span&gt;&lt;span&gt;    dir=$(basename $gitURL | cut -f1 -d&amp;quot;.&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cd $dir
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;From Which Branch you want to delete the History ? &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    read BranchName
&lt;&#x2F;span&gt;&lt;span&gt;    git checkout $BranchName
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Enter your commit message here:&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    read CommitMessage
&lt;&#x2F;span&gt;&lt;span&gt;    git checkout --orphan new_br
&lt;&#x2F;span&gt;&lt;span&gt;    git add -A
&lt;&#x2F;span&gt;&lt;span&gt;    git commit -am &amp;quot;$CommitMessage&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    git branch -D $BranchName
&lt;&#x2F;span&gt;&lt;span&gt;    git branch -m $BranchName
&lt;&#x2F;span&gt;&lt;span&gt;    git push -f origin $BranchName
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;finished successfully &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    fi
&lt;&#x2F;span&gt;&lt;span&gt;    ```
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let’s understand few key words here&lt;&#x2F;p&gt;
&lt;p&gt;basename $gitURL : extract the last path value from a URL or a directory string.&lt;&#x2F;p&gt;
&lt;p&gt;Try out: basename https:&#x2F;&#x2F;github.com&#x2F;example.git&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;** cut -f1 -d&quot;.&quot; **:&lt;&#x2F;code&gt;  is used to extract the world before “.” .&lt;&#x2F;p&gt;
&lt;p&gt;Try out: &lt;code&gt;echo &quot;test.txt&quot; | cut -f1 -d&quot;.&quot;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;git checkout --orphan &amp;lt;branch name&amp;gt;&lt;&#x2F;code&gt; : create a branch without any ancestor reference. that means it will be a independent branch (ref : https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;git-checkout)&lt;&#x2F;p&gt;
&lt;p&gt;Thank you !&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
