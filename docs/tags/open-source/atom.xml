<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>ls-lrt.com - Open -Source</title>
    <subtitle>Blog Site of Samir Parhi</subtitle>
    <link rel="self" type="application/atom+xml" href="https://ls-lrt.com/tags/open-source/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://ls-lrt.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-06-14T00:00:00+00:00</updated>
    <id>https://ls-lrt.com/tags/open-source/atom.xml</id>
    <entry xml:lang="en">
        <title>Part-2: Recursive Search with Rust</title>
        <published>2024-06-14T00:00:00+00:00</published>
        <updated>2024-06-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/recursion-in-rust/"/>
        <id>https://ls-lrt.com/recursion-in-rust/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/recursion-in-rust/">&lt;h4 id=&quot;problem-statement&quot;&gt;Problem Statement:&lt;&#x2F;h4&gt;
&lt;p&gt;Build a cli using Rust that can search a given string in all files in a directory and Sub directory Recursively.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-the-logic&quot;&gt;Building the logic:&lt;&#x2F;h3&gt;
&lt;p&gt;Lets Search from the &lt;code&gt;$PWD&lt;&#x2F;code&gt;, However you can start from any directory you want . First we have to see if there is any file in this current directory which is under this scope. after that lets find out if the search string is present in that if found return the file name and line no. If not found search the word in other file if it exist.&lt;&#x2F;p&gt;
&lt;p&gt;Now if you find a folder agin you perform the above activity and this loop continues.&lt;&#x2F;p&gt;
&lt;p&gt;Lets put the above idea to flow chart&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;img&#x2F;blog&#x2F;rust-recursion.svg&quot;&gt;
&lt;h4 id=&quot;writing-the-first-impression&quot;&gt;Writing the First impression&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
main.rs

use walkdir::WalkDir;
use regex::Regex;
use std::fs;
use std::io::{self, BufRead, Write};
use std::path::Path;
use std::path::PathBuf;

fn search_inside_file(file_path: &amp;Path, search_pattern: &amp;Regex) -&gt; io::Result&lt;()&gt; {
    let file = fs::File::open(file_path)?;
    let reader = io::BufReader::new(file);

    for (index, line) in reader.lines().enumerate() {
        let line = line?;
        if search_pattern.is_match(&amp;line) {
            println!(
                &quot;Match found in file {} at line {}: {}&quot;,
                file_path.display(),
                index + 1,
                line
            );
        }
    }

    Ok(())
}

fn search_folder_recursively(dir: &amp;Path, pattern: &amp;str) -&gt; io::Result&lt;()&gt; {
    let search_pattern = Regex::new(pattern).expect(&quot;Invalid regex pattern&quot;);

    for entry in WalkDir::new(dir).into_iter().filter_map(Result::ok) {
        let path = entry.path();

        if path.is_file() {
            if let Err(e) = search_inside_file(path, &amp;search_pattern) {
                eprintln!(&quot;Failed to read file {}: {}&quot;, path.display(), e);
            }
        }
    }

    Ok(())
}

fn main() -&gt; io::Result&lt;()&gt; {
    let mut dir = String::new();
    let mut pattern = String::new();

    println!(&quot;Enter the directory path to search in:&quot;);

    io::stdout().flush()?;

    io::stdin().read_line(&amp;mut dir)?;

    let dir = dir.trim(); 

    let dir_path = PathBuf::from(dir);

    if !dir_path.is_absolute() {
        return Err(io::Error::new(
            io::ErrorKind::InvalidInput,
            &quot;Please provide an absolute path for the directory.&quot;,
        ));
    }
    println!(&quot;Enter the search string:&quot;);
    io::stdout().flush()?;
    io::stdin().read_line(&amp;mut pattern)?;
    let pattern = pattern.trim();
    search_folder_recursively(Path::new(dir), pattern)?;



    Ok(())
}

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;lets-understand-what-is-happening-above&quot;&gt;Lets Understand What is happening above:&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;code&gt;WalkDir&lt;&#x2F;code&gt; is a type provided by the &lt;code&gt;walkdir&lt;&#x2F;code&gt; crate in Rust. helps in recursive directory traversal, allowing you to iterate over all files and directories within a given directory and its subdirectories.&lt;&#x2F;p&gt;
&lt;p&gt;There are 2 functions &lt;code&gt;search_inside_file()&lt;&#x2F;code&gt; and &lt;code&gt;search_folder_recursively()&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;search_inside_file()&lt;&#x2F;code&gt; - search the desired &lt;code&gt;string&lt;&#x2F;code&gt; in a file.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;search_folder_recursively()&lt;&#x2F;code&gt; helps us to walk between the directory recursively.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Point to note &lt;code&gt;io::stdout().flush()?&lt;&#x2F;code&gt; line of code is used to flush the output buffer of the standard output stream (stdout). It’s important to flush the output buffer at times to ensure the output appears promptly where expected, especially in scenarios where immediate visibility of output is important, such as in interactive console applications or when displaying progress updates. Without flushing, output may appear delayed or incomplete.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;important-point-to-note&quot;&gt;Important point to note :&lt;&#x2F;h4&gt;
&lt;p&gt;Above is the crude &lt;code&gt;code&lt;&#x2F;code&gt; which needs a lot of refinement with respect to the I&#x2F;O and Concurrency. If you run this code now it may show you a stream of output of search logs. Do not panic coz it is just searching the file one by one and showing you if it is found in that file . Your codde is perfectly fine and just need few modification how the output should be formatted which will talk about in the next blog.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-is-next&quot;&gt;What is next ?&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Format output to remove unnecessary logs.&lt;&#x2F;li&gt;
&lt;li&gt;Cli should be able to search multiple files at the same time.&lt;&#x2F;li&gt;
&lt;li&gt;Implement the Concurrency to reduce runtime .&lt;&#x2F;li&gt;
&lt;li&gt;Robust error handling. (CLI should not crash under any circumstances).&lt;&#x2F;li&gt;
&lt;li&gt;ClI should show an precise error message in case of failure and continue with the next file.&lt;&#x2F;li&gt;
&lt;li&gt;Writing normal Test cases and edge cases.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;you-can-explore-more-for-test-edge-cases-to-be-written-on&quot;&gt;you can explore more for Test &amp;amp; Edge cases to be written on:&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;samirparhi-dev&#x2F;dir_search&#x2F;blob&#x2F;main&#x2F;test_folder&#x2F;readme.md&quot;&gt; Code @ GitHub &lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We will be implementing them step by step in coming blogs.&lt;&#x2F;p&gt;
&lt;p&gt;Hope this helps the beginner to start their journey with RUST. ⚙️&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cross-Site Scripting (XSS) Vulnerability and Mitigation in Web Applications</title>
        <published>2024-06-04T00:00:00+00:00</published>
        <updated>2024-06-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/creating-a-aks-private-cluster-with-application-gateway-and-istio/"/>
        <id>https://ls-lrt.com/creating-a-aks-private-cluster-with-application-gateway-and-istio/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/creating-a-aks-private-cluster-with-application-gateway-and-istio/">&lt;p&gt;Security has been a very key consideration in modern application architecture. When we talk about cloud-native application architecture, people tend to think about security a lot. That is why all the cloud providers have a bunch of features to make your application more secure and robust. For example, Azure provides various gateways like Network security groups, Application gateway, Azure front-door. These azure services provide a secure connection either by introducing a firewall or validating SSL certificates.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;people say “Security is a myth over the internet&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Among all the various way of the application deployment strategy, Most of the organisation has adopted or are adopting to containerise their application and run in a Kubernetes cluster. This adaptation is influenced by the features and the advantages provided by Kubernetes. Due to this popularity, all the cloud providers had also introduced the managed Kubernetes clusters. In the case of Azure, it is known as Azure Kubernetes services (aka AKS).&lt;&#x2F;p&gt;
&lt;p&gt;In this article, we will talk about how we can create a more secure infrastructure with the azure Kubernetes services and azure application gateway. It has all the information and detailed explanations to get your cluster bootstrapped and start serving your production workload. Let’s get started.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prerequisite&quot;&gt;Prerequisite:&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;1. You should have a valid subscription and proper access in Azure to create an AKS service. Essentially, it better to have a dedicated resource group created for the AKS and you should have the owner permission to that resource group.
&lt;&#x2F;span&gt;&lt;span&gt;2. Understanding of Azure private DNS zone.
&lt;&#x2F;span&gt;&lt;span&gt;3. Understanding of Istio service mesh. In case you don&amp;#39;t know how to deploy, make use of Meshery (https:&#x2F;&#x2F;meshery.io&#x2F;) which will install and configure the service mesh for you.
&lt;&#x2F;span&gt;&lt;span&gt;4. Should know various K8s concepts essentially the POD, Services, Deployment, Namespace, Ingress Controller, and ingress gateway. Helm and kubectl should be installed.
&lt;&#x2F;span&gt;&lt;span&gt;5. Idea about the CIDR block.
&lt;&#x2F;span&gt;&lt;span&gt;6. Of course azure-cli should be installed and have an Idea to run az Command.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Networking Concept in AKS:&lt;&#x2F;p&gt;
&lt;p&gt;Before getting into the configuration, let’s understand the concept of networking used in the azure Kubernetes cluster which with ease our process of setting up the private cluster. Azure provides two kinds of networking in AKS namely kubenet and azure CNI.&lt;&#x2F;p&gt;
&lt;p&gt;Kubenet : This is the default networking being used by AKS cluster. This by default takes care of all the networking behind the scene.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: All AKS nodes get an IP address from the Azure virtual network subnet. Pods receive an IP address from a logically different address space to the Azure virtual network subnet of the nodes. Network address translation (NAT) is then configured so that the pods can reach resources on the Azure virtual network.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Azure CNI: This is also termed advance networking. If you choose to go with the CNI route you have to do some more homework but the beauty is you can customize the networking the way you want. We will be using CNI in our context.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:Every pod gets an IP address from the subnet and can be accessed directly. These IP addresses must be unique across your network space, and must be planned in advance. Each node has a configuration parameter for the maximum number of pods that it supports. The equivalent number of IP addresses per node is then reserved upfront for that node. You can configure the maximum pods deployable to a node at cluster create time or when creating new node pools. If you don’t specify maxPods when creating new node pools, you receive a default value of 110 for kubenet.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;ip-planning&quot;&gt;IP planning&lt;&#x2F;h3&gt;
&lt;p&gt;As discussed, Azure CNI assigns all the real IP to both Nodes and the pods from a given subnet space, So the Subnet should be capable enough to hold these IP ranges
The calculation below explains the min requirement of no IPs.&lt;&#x2F;p&gt;
&lt;p&gt;Assumption :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;• We are creating a 3 node cluster - Means 3 IPs will be taken from the subnet assigned to K8s.
&lt;&#x2F;span&gt;&lt;span&gt;• By default each node can have a max of 30 Pods i.e., 30*3=90 IP should be taken from the same subnet.
&lt;&#x2F;span&gt;&lt;span&gt;• From a subnet, azure reserves 5 IP addresses for its internal use.
&lt;&#x2F;span&gt;&lt;span&gt;• One extra node to be considered for the rolling update which will occupy 31 IPs (considering 30 pods per node by default)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Maximum Pod per node are limited to 250&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;By considering the above scenario, the subnet, where we want to create your K8s cluster, should have 90+3+5+31=129 IPs As our intention is to create the AKS Private cluster let’s see the private address spaces that we can use.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;✍🏼Tip: Below table shows Private address ranges available for consumption&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;cidrs&quot;&gt;CIDRs :&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s Design our CIDR for various network requirements of AKS cluster via Azure CNI Approach.   Vnet CIDR: 192.168.0.0&#x2F;20 - total 4,096 Ips (192.168.0.0 to 192.168.15.255)   AKS primary Subnet CIDR: 192.168.0.0&#x2F;21 - total 2043 IPs (192.168.0.0 - 192.168.7.255)&lt;&#x2F;p&gt;
&lt;p&gt;Terminology Used in Azure CNI:&lt;&#x2F;p&gt;
&lt;p&gt;Virtual network: This is the virtual network, where you want to create your K8S Cluster. Here, I have taken my Vnet range as 192.168.0.0&#x2F;20.&lt;&#x2F;p&gt;
&lt;p&gt;**Cluster Subnet: ** This is the Subnet inside which your K8S cluster will be created. Please note that you Should create the subnet prior to create the AKS cluster and, it should have sufficient address space. The address space requirement explained at the beginning of this document. For example, I am choosing 192.168.0.0&#x2F;21 range as my subnet for the cluster.&lt;&#x2F;p&gt;
&lt;p&gt;**Kubernetes service address range: ** This is the  CIDR or IP range that is the K8S services will be using. Please note that this IP range must not be part of any of the subnets in your cluster. In simple words, it should be different from your subnet IP ranges. Important to note that this IP range should be in the range of your VNET IP range.&lt;&#x2F;p&gt;
&lt;p&gt;For example, this address range can not be in 192.168.0.0&#x2F;21 range, as my cluster subnet is using it, but it should be in 192.168.0.0&#x2F;20 range. So I am choosing 192.168.8.0&#x2F;22 (total 1024 IPs (192.168.8.0 - 192.168.11.255))&lt;&#x2F;p&gt;
&lt;p&gt;Kubernetes DNS service IP address: This is a Distinct IP address from your Kubernetes service address range. Please note that this should be the first and last IP address of your Kubernetes service address range.   For example,  in Kubernetes service address range is 192.168.8.0&#x2F;22. Kubernetes DNS service IP address can not be 192.168.8.0 or 192.168.11.255. So I am choosing 192.168.8.8.&lt;&#x2F;p&gt;
&lt;p&gt;Docker Bridge address: this is the address range that will be used for docker bridge networking.&lt;&#x2F;p&gt;
&lt;p&gt;**Few things to remember :  **&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;1. This range should not be in the range of the Kubernetes service address range. In this case 192.168.8.0&#x2F;22.
&lt;&#x2F;span&gt;&lt;span&gt;2. Addresses matching the format ...0 or ...255 are reserved and cannot be used.
&lt;&#x2F;span&gt;&lt;span&gt;3. The prefix must be between 1 and 29.
&lt;&#x2F;span&gt;&lt;span&gt;4. The IP address cannot be the first or last address in its CIDR block In my scenario, I am choosing 192.168.12.2&#x2F;28(total 16 IPs (192.168.12.0 - 192.168.12.15)), which satisfies all the above conditions.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;**DNS name prefix: ** This is the DNS name that will be resolved for the API server of the Kubernetes cluster. You will use this FQDN to access your API server after you host your AKS cluster and the application.&lt;&#x2F;p&gt;
&lt;p&gt;What is Azure Application Gateway?&lt;&#x2F;p&gt;
&lt;p&gt;Azure Application Gateway is a web traffic load balancer that enables you to manage traffic to your web applications. This also provides the firewall capability to secure the traffic to your application. Below image from Microsoft documentation.&lt;&#x2F;p&gt;
&lt;p&gt;Our Solution Architecture Diagram: {moved to Premium content}&lt;&#x2F;p&gt;
&lt;p&gt;**Explanation: **&lt;&#x2F;p&gt;
&lt;p&gt;When users request for the website, it reaches the name server from where you have purchased your DNS (it can be azure or any 3rd party). From the name server, it finds A record and directed to the public IP of the Azure application gateway. When the request reaches the Application gateway, it validates the SSL certificate and runs the firewall rules too. then the Rules in the application gateway redirect it to its proper backend. The backend-pool for the application gateway is the istio ingress gateway. As we are constructing a fully private cluster (meaning all the IPs in the AKS cluster are private IPs) we have used DNS private Zone to implement a trusted connection between all the azure services in our VNET.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;put-things-to-action&quot;&gt;Put things to Action:&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;step-1&quot;&gt;Step 1:&lt;&#x2F;h4&gt;
&lt;p&gt;Create a resource group name k8s-rg in centralindia location (make sure to set the subscription first( here I am using my subscription named Azure)&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
az account set --subscription “Azure”
az group create -l centralindia -n k8s-rg
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;step-2-create-vnet-and-subnet-in-the-above-created-resource-group&quot;&gt;Step 2: Create vnet and subnet in the above-created resource group.&lt;&#x2F;h4&gt;
&lt;p&gt;az network vnet create -g k8s-rg -n k8s-vnet –address-prefix 192.168.0.0&#x2F;20 &lt;br &#x2F;&gt;
–subnet-name k8s-subnet –subnet-prefix 192.168.0.0&#x2F;21&lt;&#x2F;p&gt;
&lt;p&gt;Note: I have used the CIDR that is discussed above. Please refer earlier section.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-3-now-let-s-get-the-id-of-the-subnet-we-created-earlier&quot;&gt;Step 3: Now let’s get the ID of the subnet we created earlier&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
    az network vnet subnet list \     
--resource-group k8s-rg \     
--vnet-name k8s-vnet \     
--query &quot;[0].id&quot; --output tsv
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;you will get the below output, save it for use in the next step:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;subscriptions&#x2F;&amp;lt;subscriptionID&amp;gt;&#x2F;resourceGroups&#x2F;rg-k8s&#x2F;providers&#x2F;Microsoft.Network&#x2F;virtualNetworks&#x2F;k8s-vnet&#x2F;subnets&#x2F;k8s-subnet&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-4-let-s-create-our-aks-cluster&quot;&gt;Step 4. Let’s create our AKS cluster:&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
az aks create \
    --resource-group k8s-rg \
    --name k8s-private \
    --network-plugin azure \
    --vnet-subnet-id &#x2F;subscriptions&#x2F;&lt;subscriptionID&gt;&#x2F;resourceGroups&#x2F;rg-k8s&#x2F;providers&#x2F;Microsoft.Network&#x2F;virtualNetworks&#x2F;k8s-vnet&#x2F;subnets&#x2F;k8s-subnet \
    --docker-bridge-address 192.168.12.2&#x2F;28 \
    --dns-service-ip 192.168.8.8 \
    --service-cidr 192.168.8.0&#x2F;22 \
    --generate-ssh-keys
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;step-5-add-node-pool-to-aks-cluster&quot;&gt;Step 5. add node pool to AKS Cluster:&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
az aks nodepool add \
    --cluster-name k8s-private \
    --resource-group \
    --name k8s-pool \ 
    --vnet-subnet-id &#x2F;subscriptions&#x2F;&lt;subscriptionID&gt;&#x2F;resourceGroups&#x2F;rg-k8s&#x2F;providers&#x2F;Microsoft.Network&#x2F;virtualNetworks&#x2F;k8s-vnet&#x2F;subnets&#x2F;k8s-subnet

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;step-6-connect-to-your-cluster&quot;&gt;Step 6. Connect to your cluster:&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
az aks get-credentials --resource-group k8s-rg --name k8s-private \
kubectl get nodes
NAME                               STATUS   ROLES   AGE     VERSION
aks-k8s-pool-63828758-vmss000002   Ready    agent   6d11h   v1.19.11
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the AKS cluster is ready.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-7-install-istio-through-meshery&quot;&gt;Step 7. Install Istio through Meshery.&lt;&#x2F;h4&gt;
&lt;p&gt;Meshery is an open-source, service mesh management plane that enables the adoption, operation, and management of any service mesh and its workloads.&lt;&#x2F;p&gt;
&lt;p&gt;Install Meshery through Helm: https:&#x2F;&#x2F;meshery.io&#x2F;#getting-started (click on Helm icon to see the instruction to install meshery via helm)&lt;&#x2F;p&gt;
&lt;p&gt;Install Istio via from meshey UI: https:&#x2F;&#x2F;docs.meshery.io&#x2F;service-meshes&#x2F;adapters&#x2F;istio&lt;&#x2F;p&gt;
&lt;p&gt;Step 8. Making the ingress gateway internal By default the ingress gateway ( in this context Istio Ingress gateway) are internet-facing, meaning they get a public IP. In this case, we are creating a private cluster which means the cluster should only be accessed from VNET internally. To achieve this we have to make our Ingress gateway IP a private IP. This can be done by adding an annotation to our ingress service manifest. the annotation is as follows :&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
annotations:
    service.beta.kubernetes.io&#x2F;azure-load-balancer-internal: &quot;true&quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;after applying the above annotation, check your ingress gateway IP now it is a private IP:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
kubectl get svc -n istio-system
NAME                   TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)                                      AGE
istio-ingressgateway   LoadBalancer   192.168.9.186   192.168.3.193    15021:30305&#x2F;TCP,80:32107&#x2F;TCP,443:32436&#x2F;TCP   6d10h
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;step-9&quot;&gt;Step 9:&lt;&#x2F;h4&gt;
&lt;p&gt;Now let’s create an azure private DNS zone and create a CNAME for our Istio Ingress gateway. So that the ingress gateway can be accessed via the azure network. More info on Azure private DNS (https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;azure&#x2F;dns&#x2F;private-dns-overview)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;az network private-dns zone create -g k8s-rg -n privatelink.centralindia.azmk8s.io&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;in above the private DNS name is an azure defined name for the k8s services more info (https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;azure&#x2F;private-link&#x2F;private-endpoint-dns)&lt;&#x2F;p&gt;
&lt;p&gt;now let’s add an A record for our istio ingress gateway so that it is discoverable by the application gateway in the Azure network. Go to the &lt;code&gt;privatelink.centralindia.azmk8s.io&lt;&#x2F;code&gt; private DNS resource that was created and click on recordset and add an ARecord as shown below and save it.&lt;&#x2F;p&gt;
&lt;p&gt;With this, we have successfully created a cluster and it is private. Now it can not receive any request from the web. But this is discoverable in the azure internal network as we have set up a private DNS zone. To enable the request from the internet let’s create an application gateway.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-10-to-create-an-application-gateway-you-need-to-create-a-public-ip-first&quot;&gt;Step 10. To create an application gateway, you need to create a Public IP first :&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;az network public-ip create -g k8s-rg -n k8s-gw-pub-ip --allocation-method Static&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h5 id=&quot;step-11-let-s-create-the-application-gateway-now-with-the-backend-pool-as-the-istio-ingress-gateway&quot;&gt;Step 11. Let’s create the application gateway now with the backend pool as the Istio ingress gateway.&lt;&#x2F;h5&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;

az network application-gateway create \
  --name k8s-app-gateway \
  --location centralindia \
  --resource-group k8s-rg \
  --capacity 2 \
  --sku Standard_v2 \
  --public-ip-address k8s-gw-pub-ip \
  --vnet-name k8s-vnet \
  --subnet k8s-vnet \
  --servers sdistiogw.privatelink.centralindia.azmk8s.io
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this, we have successfully created our azure application gateway and also the backend is set to the istio ingress gateway. Now the application gateway will be able to forward traffic to the istio ingress gateway and also get the response from the Istio gateway.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;credits&quot;&gt;Credits:&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;• Azure Docs
&lt;&#x2F;span&gt;&lt;span&gt;• Istio
&lt;&#x2F;span&gt;&lt;span&gt;• Meshery
&lt;&#x2F;span&gt;&lt;span&gt;• Layer5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I hope you like this blog post. Please let me know your thoughts on it and suggest if you would like me to write on a specific topic.&lt;&#x2F;p&gt;
&lt;p&gt;Cheers !!!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Configuring Meshery behind ISTIO and ingress gateway</title>
        <published>2024-05-06T00:00:00+00:00</published>
        <updated>2024-05-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/configuring-meshery-behind-istio-ingress-gateway/"/>
        <id>https://ls-lrt.com/configuring-meshery-behind-istio-ingress-gateway/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/configuring-meshery-behind-istio-ingress-gateway/">&lt;p&gt;Accessing Workloads behind a ingress-gateway always has been a  industry standard practice in Kubernetes setup. It facilitate single  entry point for all your services deployed in a production grade  Kubernetes. This setup also allows you to leverage the service-mesh  functionality of implementing policies and have a better authz and authn  to the deployed services. Meshery is no different, you can configure it  to be accessed through ingress gateway. Let’s see how can we configure  it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;prerequisite&quot;&gt;Prerequisite :&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes is up and running.&lt;&#x2F;li&gt;
&lt;li&gt;Ingress controller is installed and Ingress-gateway is provisioned  (we will be taking istio into account in this example and it is  installed in istio-system Namespace)&lt;&#x2F;li&gt;
&lt;li&gt;Meshery is installed in your Kubernetes cluster (Preferably in meshery namespace)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;see-in-action&quot;&gt;See in Action:&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;step-1-prerequisite-check&quot;&gt;Step 1 : Prerequisite check&lt;&#x2F;h4&gt;
&lt;p&gt;Lets see if everything mentioned in prerequisite is fulfilled&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
$ kubectl get svc -n istio-system                                                           
NAME                   TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)                                      AGE
istio-ingressgateway   LoadBalancer   10.3.9.186   20.204.19.97    15021:30305&#x2F;TCP,80:32107&#x2F;TCP,443:32436&#x2F;TCP   37d
We have ingress gateway provisioned.
$ kubectl get po -n meshery                                                                 
NAME                                    READY   STATUS           RESTARTS      AGE
meshery-5cc4489f77-7sbc5                1&#x2F;1     Running             0          33d
meshery-operator-5db8b6c874-5cdvg       1&#x2F;1     Running             0          33d
meshery-meshsync-8lb8b6y784-6ghnk       1&#x2F;1     Running             0          33d
meshery-istio-6c56dd44fb-gk6xx          1&#x2F;1     Running             0          33d
$ kubectl get svc -n meshery                                                                
NAME                   TYPE           CLUSTER-IP   EXTERNAL-IP    PORT(S)          AGE
meshery                LoadBalancer   10.3.9.178   10.5.3.188   9081:31037&#x2F;TCP   33d

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we see that Meshery’s core components meshery, meshery-operator, meshery-meshsync, meshery-istio (meshery adapter specific to your servicemesh), and meshery LoadBalance service (meshery) are up. The istio ingress gateway istio-ingressgateway is also up.&lt;&#x2F;p&gt;
&lt;p&gt;Note :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;you can observe that the CLUSTER-IP &amp;amp; EXTERNAL-IP of the Meshery LoadBalancer are private IP (10.5.3.188, 10.3.9.178) that means you can not connect it from the browser or outside of the kubernetes cluster.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;in the other hand if you observe we have got an public ip for the istio-ingressgateway (20.204.19.97) which can be accessed from outside of the cluster.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Only way to access the Meshery is through our ingress gateway (which is part of ingress controller Istio in this case)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;step-2-let-s-create-a-istio-gateway-for-this-meshery-which-will-facilitate-meshey-to-recive-the-request-from-outside-of-cluster-to-meshery&quot;&gt;Step 2: Let’s create a istio-Gateway for this  meshery, which will facilitate meshey to recive the request from outside  of cluster to Meshery.&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip:  What is istio-Gateway?
Gateway describes a load balancer operating at the edge of the mesh  receiving incoming or outgoing HTTP&#x2F;TCP connections. The specification  describes a set of ports that should be exposed, the type of protocol to  use, SNI configuration for the load balancer, etc. More information : Istio &#x2F; Gateway.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;create a file &lt;code&gt;meshery-istio-gw.yaml&lt;&#x2F;code&gt; and copy paste the below content to the file.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
apiVersion: networking.istio.io&#x2F;v1alpha3
kind: Gateway
metadata:
  name: meshery-gateway
  namespace: meshery
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - &quot;*&quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let’s apply this manifest in meshery Namespace.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm px-1&quot;&gt;
$ kubectl apply -f meshery-istio-gw.yaml
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip:
Istio gateway is namespace scoped.  The gateway listener for meshery listens on port 80.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;step-3-lets-create-a-virtualservice-for-istio-gateway-to-reach-meshery-loadbalancer-in-the-kubernetes-cluster&quot;&gt;Step 3: Lets create a virtualService for Istio gateway to reach Meshery Loadbalancer in the kubernetes cluster&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;🚩 Tip: A VirtualService defines a set of traffic routing rules to apply when a  host is addressed. Each routing rule defines matching criteria for  traffic of a specific protocol. If the traffic is matched, then it is  sent to a named destination service (or subset&#x2F;version of it) defined in  the registry. More info: Istio &#x2F; Virtual Service.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;create a file &lt;code&gt;meshery-istio-vs.yaml&lt;&#x2F;code&gt; and copy paste the below content to the file.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm max-h-64&quot;&gt;
apiVersion: networking.istio.io&#x2F;v1alpha3
kind: VirtualService
metadata:
  name: meshery
  namespace: meshery
spec:
  hosts:
  - &quot;*&quot;
  gateways:
  - meshery-gateway
  http:
  - match:
    - uri:
        prefix: &#x2F;
    route:
    - destination:
        host: meshery
        port:
          number: 9081
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let’s apply this manifest in meshery Namespace.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;
$ kubectl apply -f meshery-istio-vs.yaml

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip: istio virtualService is namespace scoped.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;understanding-meshery-istio-vs-yaml&quot;&gt;Understanding &lt;code&gt;meshery-istio-vs.yaml&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;When the request hits the istio ingress gateway (the gateway listener for meshery listens on port 80) with prefix “&#x2F;” (root) it will forward it to the kubernetes service meshery which exists in meshery Namespace and listing on 9081 (The default port of Meshery)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-4-accessing-meshery&quot;&gt;Step 4: Accessing Meshery:&lt;&#x2F;h4&gt;
&lt;p&gt;Now you can access meshhery UI with http:&#x2F;&#x2F;&#x2F; in this context http:&#x2F;&#x2F;20.204.19.97&#x2F;
Tip: when you hit http:&#x2F;&#x2F;20.204.19.97&#x2F; it will automatically redirect you to
http:&#x2F;&#x2F;20.204.19.97&#x2F;provider and you will she the meshery UI as below:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;extras&quot;&gt;Extras :&lt;&#x2F;h4&gt;
&lt;p&gt;You can use fqdn (let’s say meshery.example.com) for accessing meshery. In that case you have to replace &lt;code&gt;*&lt;&#x2F;code&gt; field under hosts: section in &lt;code&gt;meshery-istio-vs.yaml&lt;&#x2F;code&gt; and &lt;code&gt;meshery-istio-gw.yaml&lt;&#x2F;code&gt; to &lt;code&gt;meshery.example.com&lt;&#x2F;code&gt; .&lt;&#x2F;p&gt;
&lt;h4 id=&quot;find-it-on&quot;&gt;Find it on  : &lt;a href= &quot;https:&#x2F;&#x2F;discuss.layer5.io&#x2F;t&#x2F;configuring-meshery-behind-istio-ingress-gateway&#x2F;157&#x2F;&quot; target=&quot;_blank&quot;&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Layer5 discuss forum
&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;credits&quot;&gt;Credits:&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;layer5.io&#x2F;&quot; target=&quot;_blank&quot;&gt; Layer5&lt;&#x2F;a&gt; , &lt;a href=&quot;https:&#x2F;&#x2F;istio.io&#x2F;&quot; target=&quot;_blank&quot;&gt; Istio&lt;&#x2F;a&gt; , &lt;a href=&quot;https:&#x2F;&#x2F;meshery.io&#x2F;&quot; target=&quot;_blank&quot;&gt; Meshery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cross-Site Scripting (XSS) Vulnerability and Mitigation in Web Applications</title>
        <published>2024-04-30T00:00:00+00:00</published>
        <updated>2024-04-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/cross-site-scripting-xss-vulnerability-and-mitigation-in-web-applications/"/>
        <id>https://ls-lrt.com/cross-site-scripting-xss-vulnerability-and-mitigation-in-web-applications/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/cross-site-scripting-xss-vulnerability-and-mitigation-in-web-applications/">&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h4&gt;
&lt;p&gt;In the realm of web security, Cross-Site Scripting (XSS) stands as one of the most prevalent and hazardous vulnerabilities. With its ability to manipulate the interaction between a web application and its users, XSS can lead to unauthorized data exposure, session hijacking, and even malware distribution. This article delves into the concept of XSS, highlighting its potential impact and providing insight into securing applications against this threat.
Understanding Cross-Site Scripting (XSS)&lt;&#x2F;p&gt;
&lt;p&gt;At its core, XSS is a vulnerability that arises when a web application incorporates untrusted data into its output, allowing attackers to inject malicious scripts into the content delivered to other users. This often happens when user-generated content isn’t properly sanitized before being displayed. The impact of an XSS attack can vary, from stealing sensitive information to impersonating users or even taking control of their accounts.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;analyzing-the-vulnerable-code&quot;&gt;Analyzing the Vulnerable Code&lt;&#x2F;h5&gt;
&lt;p&gt;Let’s analyze a code snippet that fetches data from an API and processes it. This sample code contains potential XSS vulnerabilities:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;

public String getInfofromAPI(String Authorization, String comingRequest) throws 

Exception {
        String returnOBJ = null;
        String tempResponse = null;
        RestTemplate restTemplate = new RestTemplate();
        MultiValueMap&lt;String, String&gt; headers = new LinkedMultiValueMap&lt;String, String&gt;();
        headers.add(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;);
        headers.add(&quot;AUTHORIZATION&quot;, Authorization);
        String encodedRequest = URLEncoder.encode(comingRequest, &quot;UTF-8&quot;);
        HttpEntity&lt;Object&gt; request = new HttpEntity&lt;Object&gt;(encodedRequest, headers);
        ResponseEntity&lt;String&gt; response = restTemplate.exchange(requiredURL, HttpMethod.POST, request,
                String.class);
        return returnOBJ;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The key vulnerability here lies in the potential mishandling of the returnOBJ data. If the JSON response contains user-controlled data that is not properly sanitized before being processed or displayed, an attacker could inject malicious scripts.&lt;&#x2F;p&gt;
&lt;p&gt;Mitigating XSS Vulnerabilities&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Input Validation and Sanitization: Implement strict input validation and sanitize all incoming data. In the case of user-generated content, utilize output encoding functions to ensure that any data displayed on the web page is treated as plain text rather than executable code.&lt;&#x2F;li&gt;
&lt;li&gt;Content Security Policy (CSP): Utilize CSP headers to restrict the sources from which content can be loaded onto your web page. This can prevent the execution of scripts from unauthorized sources.&lt;&#x2F;li&gt;
&lt;li&gt;Contextual Output Encoding: Encode output based on its context. Different encoding methods should be used for HTML, JavaScript, and URL contexts to ensure the correct interpretation of data.&lt;&#x2F;li&gt;
&lt;li&gt;Use Framework Security Features: Many web frameworks offer security features to prevent XSS, such as automatic output encoding. Leverage these features to protect your application.&lt;&#x2F;li&gt;
&lt;li&gt;Regular Security Audits: Regularly audit your application’s codebase for potential vulnerabilities, including XSS. Automated tools and manual reviews can help identify and address security issues.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now as we understood, Let’s rewrite the above code by mitigating the XSS Vulnerabilities using the User input sanitization method.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;text-sm&quot;&gt;

public String getResponseFromAPI(String Authorization, String comingRequest) throws Exception {
        String returnOBJ = null;
        String tempResponse = null;
        RestTemplate restTemplate = new RestTemplate();
        MultiValueMap&lt;String, String&gt; headers = new LinkedMultiValueMap&lt;String, String&gt;();
        headers.add(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;);
        headers.add(&quot;AUTHORIZATION&quot;, Authorization);
        String encodedRequest = URLEncoder.encode(comingRequest, &quot;UTF-8&quot;);
        HttpEntity&lt;Object&gt; request = new HttpEntity&lt;Object&gt;(encodedRequest, headers);
        ResponseEntity&lt;String&gt; response = restTemplate.exchange(destinationURL, HttpMethod.POST, request,
                String.class);
        tempResponse = response.getBody();
        &#x2F;&#x2F; Desired key-value pairs and their types
        String desiredKey1 = &quot;Name&quot;;
        Class&lt;?&gt; desiredValueType1 = String.class;
String desiredKey2 = &quot;createdDate&quot;;
        Class&lt;?&gt; desiredValueType2 = Timestamp.class;
        &#x2F;&#x2F; Parse the JSON response
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(tempResponse);
&#x2F;&#x2F; Check if the desired key-value pairs exist
        if (jsonNode.has(desiredKey1) &amp;&amp; jsonNode.has(desiredKey2)) {
            if (jsonNode.get(desiredKey1).getClass().equals(desiredValueType1)) {
                if (jsonNode.get(desiredKey2).getClass().equals(desiredValueType2)) {
                    returnOBJ = objectMapper.writeValueAsString(jsonNode);
                } else {
                    System.out.println(&quot;Value type for key2 does not match the desired type.&quot;);
                }
            } else {
                System.out.println(&quot;Value type for key1 does not match the desired type.&quot;);
            }
        } else {
            System.out.println(&quot;Desired key-value pairs not found in the JSON response.&quot;);
        }
        return returnOBJ;
}
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above code, we have validated if the Response we got has the Appropriate key and the corresponding value is of required data type.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h4&gt;
&lt;p&gt;Cross-site scripting (XSS) remains a significant threat to web applications, making them susceptible to data breaches and unauthorized access. By understanding the nature of XSS vulnerabilities and implementing proper security measures, developers can fortify their applications against these risks. Input validation, output encoding, and leveraging security features provided by frameworks are crucial steps in mitigating XSS and creating a safer online experience for users.
Happy Learning 🎉&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Part:0 - Few facts about Rust programming language</title>
        <published>2024-04-30T00:00:00+00:00</published>
        <updated>2024-04-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/few-facts-about-rust-programming-language/"/>
        <id>https://ls-lrt.com/few-facts-about-rust-programming-language/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/few-facts-about-rust-programming-language/">&lt;p&gt;This is the very first write-up of our Rust journey. In this part, we will learn a few interesting facts about Rust programming language. This will give us an overview of how and what of Rust at a high level.&lt;&#x2F;p&gt;
&lt;p&gt;Every programming languages are special. Let’s take an overview of very charming Rust .&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;1. Like most programming languages, the rust logic execution starts from main() block.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;2. Rust is a statically typed language, Which means you have to specify the data type ( int&#x2F;float&#x2F;String) of each variable. More about data types can be found here.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;3. The variable&#x2F;literals are immutable by default in rust. However, you can make the variable mutable by using mutkeyword. Why the variable is immutable by default?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ○ This is to provide the developer with an easy way to debug a program. When you know the value is not changed it is easy to debug.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ○ The second reason is let&amp;#39;s say there are two expressions which are using the same value. if during execution the variable changes then, the expressions may not work as expected. So to make the program more robust the literals are mutable. You can get more info here.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;4. Rust is a compiled language. This means each project&#x2F; code produces an executable file like .exe, .deb etc. after compiling. The advantage is the code can run in any of the operating systems without a rust installation.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;5. There are two kinds of string data types namely &amp;amp;str : string slice and String.This is to provide memory safety for the rust program. we will learn more about these in the coming parts.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;6. To prevent the memory leak in rust and make it more robust, Rust uses the concept called ownership . this is a very useful and interesting feature in Rust. This helps regulating variable scopes. When a variable goes out of scope rust deletes&#x2F; frees the value as well as the memory. More information here.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;7. Rust Does not have the concept of a Garbage collector due to the above-said reason
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;8. Like other languages you can use external libraries&#x2F;packages that are provided by rust itself (standard libraries) or 3rd parties. The packages&#x2F;Libraries are called Crates.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;9. Rust manages the Dependencies in a very well manner. The package manager is called Cargo. the interesting thing is that if you create a project with Cargo, it not only creates the boilerplate folder structure but it initialises the folder with Git automatically. So it natively supports Git.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These are few facts i found may be intersting to know before starting to learn Rust. Please let me if you have found some interssting fact about rust. Do correct if something is wrong here :-)&lt;&#x2F;p&gt;
&lt;p&gt;See you in the part 1 😀 .&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Imposing mandatory http(s) security headers in NGINX ingress in Kubernetes</title>
        <published>2024-04-30T00:00:00+00:00</published>
        <updated>2024-04-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/imposing-mandatory-http-s-security-headers-in-nginx/"/>
        <id>https://ls-lrt.com/imposing-mandatory-http-s-security-headers-in-nginx/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/imposing-mandatory-http-s-security-headers-in-nginx/">&lt;p&gt;Making an application up and running does not qualify as a full-fledged product. It is particularly important to have security measure in the Product. Now in the ever-increasing digital revolution, security flaws are really risk for an organisation as-well as the users. Though we cannot eliminate all the risks, we can always try to address most of them and the important CVEs. Earlier days these security considerations (Security headers in this context) are handled by application itself and coded by the developer in the application code but in the micro-service world it is especially important for developers to focus more on business logic rather than all these auxiliary tasks to reduce time to market of the product.&lt;&#x2F;p&gt;
&lt;p&gt;The good news is, now DevOps team can handle few of these features with help of Kubernetes, Iingress Gateways and Service Meshes. In this blog post we will focus on how to impose the mandatory security headers in Kubernetes NGINX ingress controller.
OWASP (Open Web Application Security Project) is a nonprofit foundation that works to improve the security of software, has recommended to below HTTP headers should be present by default.&lt;&#x2F;p&gt;
&lt;p&gt;Important HTTP headers:&lt;&#x2F;p&gt;
&lt;p&gt;Server - this is the first header which we must impose so the Server label should not be displayed in the browser
server: hide
&lt;code&gt;X-Frame-Options&lt;&#x2F;code&gt; - to avoid clickjacking attacks, by ensuring that their content is not embedded into other sites
&lt;code&gt;X-Frame-Options&lt;&#x2F;code&gt;: DENY or SAMEORIGIN
&lt;code&gt;X-XSS-Protection&lt;&#x2F;code&gt; - stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.
&lt;code&gt;X-XSS-Protection&lt;&#x2F;code&gt;: 0 or 1
Content-Type - Indicate the original media type of the resource (prior to any content encoding applied for sending).
&lt;code&gt;Content-Type&lt;&#x2F;code&gt;: text&#x2F;html; charset=UTF-8
&lt;code&gt;X-Content-Type-Options&lt;&#x2F;code&gt; - Avoid MIME type sniffing
&lt;code&gt;X-Content-Type-Options&lt;&#x2F;code&gt;: nosniff
&lt;code&gt;Strict-Transport-Security&lt;&#x2F;code&gt; (HSTS) - Enforce browsers that it should only be accessed using HTTPS, instead of using HTTP.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Strict-Transport-Security&lt;&#x2F;code&gt;: max-age=&amp;lt; expire-time-in-sec&amp;gt;; includeSubDomains; preload
&lt;code&gt;Strict-Transport-Security&lt;&#x2F;code&gt;: max-age=31536000; includeSubDomains; preload
&lt;code&gt;Content-Security-Policy&lt;&#x2F;code&gt; (CSP) - mitigate Cross-Site Scripting (XSS) and data injection attacks
&lt;code&gt;Content-Security-Policy&lt;&#x2F;code&gt;: default-src ‘self’ http:&#x2F;&#x2F;example.com
&lt;code&gt;Cross-Origin-Resource-Policy&lt;&#x2F;code&gt; - tells the browser blocks no-cors cross-origin&#x2F;cross-site requests to the given resource
&lt;code&gt;Cross-Origin-Resource-Policy&lt;&#x2F;code&gt;: same-site&lt;&#x2F;p&gt;
&lt;p&gt;Now as we understood the mandatory security headers to be imposed to our application, let’s see how we can configure from NGINX ingress add the annotation nginx.ingress.kubernetes.io&#x2F;configuration-snippet: in the ingress manifest file (ingress.yaml )&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;apiVersion: extensions&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span&gt;kind: Ingress
&lt;&#x2F;span&gt;&lt;span&gt;namespace: my-app
&lt;&#x2F;span&gt;&lt;span&gt;metadata:
&lt;&#x2F;span&gt;&lt;span&gt;  name: app-ingress
&lt;&#x2F;span&gt;&lt;span&gt;  annotations:
&lt;&#x2F;span&gt;&lt;span&gt;    nginx.ingress.kubernetes.io&#x2F;configuration-snippet: |
&lt;&#x2F;span&gt;&lt;span&gt;      more_set_headers &amp;quot;server: hide&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      more_set_headers &amp;quot;Content-Type: text&#x2F;html; charset=UTF-8&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      more_set_headers &amp;quot;X-Content-Type-Options: nosniff&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      more_set_headers &amp;quot;X-Frame-Options: DENY&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      more_set_headers &amp;quot;X-Xss-Protection: 0&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      more_set_headers &amp;quot;Strict-Transport-Security: max-age=31536000; includeSubDomains; preload&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      more_set_headers &amp;quot;Content-Security-Policy: default-src &amp;#39;self&amp;#39; http:&#x2F;&#x2F;example.com&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      more_set_headers &amp;quot;Cross-Origin-Resource-Policy: same-site&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;spec:
&lt;&#x2F;span&gt;&lt;span&gt;  rules:
&lt;&#x2F;span&gt;&lt;span&gt;  - http:
&lt;&#x2F;span&gt;&lt;span&gt;      paths:
&lt;&#x2F;span&gt;&lt;span&gt;      - path: &#x2F;testpath
&lt;&#x2F;span&gt;&lt;span&gt;        pathType: Prefix
&lt;&#x2F;span&gt;&lt;span&gt;        backend:
&lt;&#x2F;span&gt;&lt;span&gt;          service:
&lt;&#x2F;span&gt;&lt;span&gt;            name: test
&lt;&#x2F;span&gt;&lt;span&gt;            port:
&lt;&#x2F;span&gt;&lt;span&gt;              number: 80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are also other interesting and useful annotation which you can checkout and I am sure it will enable you to add more features to your application.&lt;&#x2F;p&gt;
&lt;p&gt;Sources:
mdn Docs
NGINX Ingress controller
OWASP Docs
Hope this helps. Stay tuned for More!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Parameters to Consider while choosing an Open-Source tool.</title>
        <published>2024-04-30T00:00:00+00:00</published>
        <updated>2024-04-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/parameters-to-consider-while-choosing-an-open-source-tool/"/>
        <id>https://ls-lrt.com/parameters-to-consider-while-choosing-an-open-source-tool/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/parameters-to-consider-while-choosing-an-open-source-tool/">&lt;p&gt;When deciding on an open-source tool for a specific purpose, there are several key parameters you should consider to ensure the tool meets your needs and is a good fit for your project. Here are some important parameters to keep in mind:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;1. Functionality: The tool should have the features and capabilities required to fulfil your project&amp;#39;s objectives. Make a list of the specific functions you need and compare them with the tool&amp;#39;s capabilities.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;2. Ease of Use: Consider the tool&amp;#39;s user interface, documentation, and overall usability. An intuitive and well-documented tool can save you time and effort during the learning and implementation phases.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;3. Community and Support: A strong and active community can provide valuable assistance, share knowledge, and contribute to the tool&amp;#39;s improvement. Check the community size, forums, mailing lists, and support resources.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;4. Documentation: Comprehensive and up-to-date documentation is crucial for understanding how to use the tool effectively. It should include installation guides, tutorials, API references, and troubleshooting information.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;5. Popularity and Adoption: Tools with a larger user base often have better community support, more frequent updates, and a higher chance of long-term maintenance.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;6. Licensing: Open-source tools come with various licenses, some of which may have restrictions on usage, distribution, or modification. Ensure the tool&amp;#39;s license aligns with your project&amp;#39;s requirements and legal obligations.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;7. Customization and Extensibility: Determine whether the tool can be customized or extended to suit your specific needs. A highly customizable tool can be adapted to fit your project&amp;#39;s unique requirements.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;8. Performance: Evaluate the tool&amp;#39;s performance in terms of speed, resource usage, and scalability. Ensure it can handle the expected workload without significant bottlenecks.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;9. Security: Assess the tool&amp;#39;s security features, vulnerabilities, and track record for addressing security issues promptly. Security is crucial, especially if the tool handles sensitive data or interacts with external systems.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;10. Compatibility and Integrations: Check if the tool can integrate seamlessly with your existing infrastructure, software, or other tools you&amp;#39;re using. Compatibility can save time and reduce implementation challenges.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;11. Longevity and Maintenance: Consider the tool&amp;#39;s development activity and the frequency of updates. An actively maintained tool is less likely to become outdated or abandoned.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;12. Vendor Lock-In: Be cautious of tools that might lead to vendor lock-in, making it difficult to switch to alternative solutions in the future. Open standards and open data formats can help mitigate this risk.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;13. Scalability: If your project is expected to grow, ensure that the tool can scale with increasing demand and handle larger datasets or user loads.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;14. Cost and Budget: While open-source tools are often cost-effective, consider any associated costs such as training, customization, and support.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;15. Reviews and Feedback: Research online reviews, user testimonials, and case studies to gather insights from others who have used the tool for similar purposes.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;16. Ease of Installation and Setup: Consider how straightforward it is to install, configure, and set up the tool. A complex installation process might hinder your project&amp;#39;s progress.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;17. Ecosystem: Check if the tool is part of a larger ecosystem of related tools or libraries that can enhance its functionality.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Uncontrolled Data Used in Path Expression: A Cyber Security Threat</title>
        <published>2024-04-30T00:00:00+00:00</published>
        <updated>2024-04-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/uncontrolled-data-used-in-path-expression-a-cyber-security-threat/"/>
        <id>https://ls-lrt.com/uncontrolled-data-used-in-path-expression-a-cyber-security-threat/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/uncontrolled-data-used-in-path-expression-a-cyber-security-threat/">&lt;p&gt;Path expressions are used in a variety of software applications to construct file paths. However, if these expressions are not properly validated, they can be used by attackers to gain unauthorized access to sensitive data or systems.&lt;&#x2F;p&gt;
&lt;p&gt;This type of attack is known as path traversal, and it can be used to access files that are outside of the intended directory structure. For example, an attacker could provide a path expression that includes a “..&#x2F;” sequence, which would cause the application to traverse up one directory level. This could allow the attacker to access files that they would not otherwise be able to see.&lt;&#x2F;p&gt;
&lt;p&gt;Path traversal attacks can also be used to exploit vulnerabilities in web applications. For example, an attacker could provide a path expression that includes a “..” sequence in a web form. If the application does not properly validate the input, the attacker could use this to access the application’s filesystem.&lt;&#x2F;p&gt;
&lt;p&gt;To prevent path traversal attacks, it is important to properly validate all user input that is used to construct path expressions. This can be done by using a regular expression to ensure that the input only contains valid characters. Additionally, it is important to restrict the access that users have to sensitive files and directories.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some tips for preventing path traversal attacks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;• Use a regular expression to validate all user input that is used to construct path expressions.
&lt;&#x2F;span&gt;&lt;span&gt;• Restrict the access that users have to sensitive files and directories.
&lt;&#x2F;span&gt;&lt;span&gt;• Use a web application firewall (WAF) to filter out malicious requests.
&lt;&#x2F;span&gt;&lt;span&gt;• Keep your software up to date with the latest security patches.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By following these tips, you can help to protect your applications from path traversal attacks.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some examples of path traversal attacks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;• file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd - This path expression would allow an attacker to access the passwd file, which contains the usernames and passwords of all users on the system.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;• http:&#x2F;&#x2F;localhost&#x2F;..&#x2F;etc&#x2F;passwd - This path expression would allow an attacker to access the passwd file from a web application.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;• c:\\windows\\system32\\cmd.exe - This path expression would allow an attacker to execute a command on a Windows system.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Code:&lt;&#x2F;p&gt;
&lt;p&gt;This example illustrates how important it is to properly validate all user input that is used to construct path expressions. By validating the input, you can help to protect your applications from path traversal attacks.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;import java.io.File;
&lt;&#x2F;span&gt;&lt;span&gt;import java.io.IOException;
&lt;&#x2F;span&gt;&lt;span&gt;public class PathTraversalExample {
&lt;&#x2F;span&gt;&lt;span&gt;public static void main(String[] args) throws IOException {
&lt;&#x2F;span&gt;&lt;span&gt;        String filename = &amp;quot;&#x2F;etc&#x2F;passwd&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; This code is vulnerable to path traversal attacks.
&lt;&#x2F;span&gt;&lt;span&gt;        File file = new File(filename);
&lt;&#x2F;span&gt;&lt;span&gt;        System.out.println(file.exists());
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; This code is safe from path traversal attacks.
&lt;&#x2F;span&gt;&lt;span&gt;        String sanitizedFilename = filename.replaceAll(&amp;quot;..&#x2F;&amp;quot;, &amp;quot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        File safeFile = new File(sanitizedFilename);
&lt;&#x2F;span&gt;&lt;span&gt;        System.out.println(safeFile.exists());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, the filename variable is used to construct a file path. If the user provides a path that includes a “..” sequence, the application will traverse up one directory level. This could allow the attacker to access the etc&#x2F;passwd file, which contains the usernames and passwords of all users on the system.&lt;&#x2F;p&gt;
&lt;p&gt;The sanitizedFilename variable is created by replacing all occurrences of the “..” sequence with an empty string. This ensures that the path expression is safe from path traversal attacks.&lt;&#x2F;p&gt;
&lt;p&gt;If you provide a path that includes a “..” sequence, the application will print false. If you provide a safe path, the application will print true.&lt;&#x2F;p&gt;
&lt;p&gt;If you think that your application may be vulnerable to path traversal attacks, there
are a few things you can do:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;• Scan your application for vulnerabilities using a security scanner.
&lt;&#x2F;span&gt;&lt;span&gt;• Review the source code of your application to look for potential vulnerabilities.
&lt;&#x2F;span&gt;&lt;span&gt;• Contact the vendor of your application for security updates.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By taking these steps, you can help to protect your application from path traversal attacks.&lt;&#x2F;p&gt;
&lt;p&gt;Happy Learning&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Part 1: Variable and DataTypes in Rust</title>
        <published>2024-04-30T00:00:00+00:00</published>
        <updated>2024-04-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/variable-and-datatypes-in-rust/"/>
        <id>https://ls-lrt.com/variable-and-datatypes-in-rust/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/variable-and-datatypes-in-rust/">&lt;p&gt;Variables are the basic building blocks of a programming language. It holds data in the computer memory during runtime. The data that a variable hold can be different types. Like other languages, Rust has 2 kinds of high-level data types. Scalar and Compound . Scalar contains a single value whereas Compound holds multi-value data in the memory during run time. the default data types are explained in the figure below:&lt;&#x2F;p&gt;
&lt;p&gt;Now if you mark in the figure we use let keyword to declare a variable and the value of the variable is on the right side of the = symbol.
It is important to note that the variable in the rust is immutable (do not change the data once loaded) by default (why? please refer the part:0 of this series) However you can have the liberty to make it immutable by adding a mut keyword in front of any variable name. Example below:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;let x = 10 ; &#x2F;&#x2F;this immutable 
&lt;&#x2F;span&gt;&lt;span&gt;let x = 11 ; &#x2F;&#x2F; while doing this you will get an error
&lt;&#x2F;span&gt;&lt;span&gt;mut let x = 10 ; &#x2F;&#x2F;this is mutable
&lt;&#x2F;span&gt;&lt;span&gt;let x = 11 ; &#x2F;&#x2F; you are safe to do this action
&lt;&#x2F;span&gt;&lt;span&gt;it is best practice to mention the data type of the variable while declaring. However, rust can automatically detect when you have rust analyzer installed on any of the popular IDE. To mention the data type below are the samples.
&lt;&#x2F;span&gt;&lt;span&gt;let a: u32 = 23; &#x2F;&#x2F; a unsigned 32 bit integer
&lt;&#x2F;span&gt;&lt;span&gt;let b: f32 = 2.3; &#x2F;&#x2F; a floating point 32 integer
&lt;&#x2F;span&gt;&lt;span&gt;let c: bool = false; &#x2F;&#x2F; a boolean type variable
&lt;&#x2F;span&gt;&lt;span&gt;let d: char = &amp;#39;m&amp;#39;; &#x2F;&#x2F; a char type variable
&lt;&#x2F;span&gt;&lt;span&gt;let e: (i32, char, f32) = (23, &amp;#39;m&amp;#39;, 2.3); &#x2F;&#x2F; a tupple type
&lt;&#x2F;span&gt;&lt;span&gt;let f: [i32; 5] = [6, 7, 8, 9, 10]; &#x2F;&#x2F; an array type
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To know what all are the different types of integers and floats please refer here.
to print anything to the output console rust used println!() macro. in side println!() macro to extract the value of a variable you have to enclose the variable with {}. the sample is given below:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;    let mut a: i32 = 7; &#x2F;&#x2F; a mutable variable
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;The value of a is: {a}&amp;quot;); &#x2F;&#x2F;print 7
&lt;&#x2F;span&gt;&lt;span&gt;    let a = 8;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;The value of y is: {a}&amp;quot;); &#x2F;&#x2F;print 8
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;let’s know something more about Compound data types:
Array operations:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;let&amp;#39;s take an array as :
&lt;&#x2F;span&gt;&lt;span&gt;let f: [i32; 5] = [6, 7, 8, 9, 10];&#x2F;&#x2F; i32 is the data types of the array and 5 is the length of the array.
&lt;&#x2F;span&gt;&lt;span&gt;let first = f[0]; &#x2F;&#x2F; first holds First element of array 
&lt;&#x2F;span&gt;&lt;span&gt;let five = f[4]; &#x2F;&#x2F; holds 5th element of the array
&lt;&#x2F;span&gt;&lt;span&gt;let r = &amp;amp;f[0..3]; &#x2F;&#x2F; r holds the element starting with 0th index till 2nd index. last index is always excluded.
&lt;&#x2F;span&gt;&lt;span&gt;let g: [i32; 0] = [] &#x2F;&#x2F; an empty array.
&lt;&#x2F;span&gt;&lt;span&gt;let g: [i32; 5] = [7, 5] &#x2F;&#x2F; returns [7, 7, 7, 7, 7]
&lt;&#x2F;span&gt;&lt;span&gt;Tuple operations:
&lt;&#x2F;span&gt;&lt;span&gt;let&amp;#39;s take a tuple as:
&lt;&#x2F;span&gt;&lt;span&gt;let f: (i32, &amp;amp;str, f64)= (7, &amp;quot;samir&amp;quot;, 3.8); &#x2F;&#x2F; a tuple
&lt;&#x2F;span&gt;&lt;span&gt;let mut r = f.0; &#x2F;&#x2F;r contains the 0th index value i,e 7
&lt;&#x2F;span&gt;&lt;span&gt;let r = f.2; &#x2F;&#x2F; now r contains the 2nd index value i,e 3.8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this part, we learnt the overview and a few operations on array and tuple. this is very easy and if you have learnt any programming language earlier this might be familiar to you. but as I told this series is for the beginner and comes in handy during the initial days.&lt;&#x2F;p&gt;
&lt;p&gt;Thank you for hopping in and see you in the next part.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Why I was encouraged to learn Rust (Comparing Rust and Python</title>
        <published>2024-04-30T00:00:00+00:00</published>
        <updated>2024-04-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Samir Ranjan Parhi
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ls-lrt.com/why-i-was-encouraged-to-learn-rust/"/>
        <id>https://ls-lrt.com/why-i-was-encouraged-to-learn-rust/</id>
        
        <content type="html" xml:base="https://ls-lrt.com/why-i-was-encouraged-to-learn-rust/">&lt;p&gt;It is been 8 years in my Job career as an infrastructure&#x2F;DevSecOps engineer, I am much satisfied. But in the corner of my heart, I had the urge to learn programming so that I can relate my daily job to the developer program easily.&lt;&#x2F;p&gt;
&lt;p&gt;Everyone knows there are a lot of great programming languages and also suggested some. Finally, I was left with python and Rust. When I started comparing both the below fact sheet concluded that I should start investing my time in learning Rust.&lt;&#x2F;p&gt;
&lt;p&gt;The fact sheet:&lt;&#x2F;p&gt;
&lt;p&gt;Facts	Rust	Python
Learning curve	High (for a complete beginner)	Easy to learn
Execution speed	High	Much lower
Memory Management	Exceptional (no need for garbage collector)	Lower than
syntax	Statically typed.	plain English
Creating System tools	Very much recommend	Not Recommended
Popular in Developer	#1	#3
Stability	High	low
Documentation	sufficient	Sufficient
Pre-existing module	less (Developing)	A lot (plug and play)
type	Low level	High level&lt;&#x2F;p&gt;
&lt;p&gt;Out of all these comparisons, I loved the way Rust manage the Memory and the art behind the failsafe. I have heard of the pain of developers when it comes to the performance of the application and performing the right way to collect the garbage, it is no more in Rust. I was also fascinated to know how the most amazing tool like Kubernetes is programmed, So Rust was the right choice for me to take up. Though I know I will be starting programming from the scratch, and there will be a huge learning curve this year, I would try to learn as much as possible.&lt;&#x2F;p&gt;
&lt;p&gt;At the same time, I will be publishing my learning note as I progress with a self-assessment so that it would provide the reader with more insight.
Stay tuned in this series to learn along with me. Let’s be closer to the system a bit more.&lt;&#x2F;p&gt;
&lt;p&gt;Note: The above opinions are solely my personal views&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
